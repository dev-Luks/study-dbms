/*JOBS 테이블에서 JOB_ID로 직원들의 JOB_TITLE, EMAIL, 성, 이름 검색*/
SELECT JOB_TITLE, EMAIL, LAST_NAME || ' ' || FIRST_NAME NAME 
FROM JOBS J JOIN EMPLOYEES E
ON J.JOB_ID = E.JOB_ID;

/*EMP 테이블의 SAL을 SALGRADE 테이블의 등급으로 나누기*/
SELECT * 
FROM SALGRADE S JOIN EMP E 
ON E.SAL BETWEEN S.LOSAL AND S.HISAL;

/*세타 조인*/
SELECT *
FROM SALGRADE S, EMP E
WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;

/*EMPLOYEES 테이블에서 HIREDATE가 2003~2005년까지인 사원의 정보와 부서명 검색*/
SELECT D.DEPARTMENT_NAME, E.*  
FROM EMPLOYEES E JOIN DEPARTMENTS D ON
E.DEPARTMENT_ID = D.DEPARTMENT_ID AND
E.HIRE_DATE BETWEEN TO_DATE('2003', 'YYYY') AND TO_DATE('2005', 'YYYY');

SELECT SYS_CONTEXT('USERENV', 'NLS_DATE_FORMAT') FROM DUAL;
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY';
ALTER SESSION SET NLS_DATE_FORMAT = 'RR/MM/DD';

/*JOB_TITLE 중 'Manager'라는 문자열이 포함된 직업들의 평균 연봉을 JOB_TITLE별로 검색*/
SELECT JOB_TITLE, AVG(SALARY) "AVERAGE OF SALARY"
FROM JOBS J JOIN EMPLOYEES E
ON J.JOB_ID = E.JOB_ID AND JOB_TITLE LIKE '%Manager%'
GROUP BY JOB_TITLE;

/*EMP 테이블에서 ENAME에 L이 있는 사원들의 DNAME과 LOC 검색*/
SELECT ENAME, DNAME, LOC FROM DEPT D JOIN EMP E
ON D.DEPTNO = E.DEPTNO AND ENAME LIKE '%L%';

/*축구 선수들 중에서 각 팀별로 키가 가장 큰 선수들 전체 정보 검색*/
SELECT P1.*
FROM PLAYER P1 JOIN
(
   SELECT TEAM_ID, MAX(HEIGHT) HEIGHT FROM PLAYER
   GROUP BY TEAM_ID
) P2
ON P1.TEAM_ID = P2.TEAM_ID AND P1.HEIGHT = P2.HEIGHT
ORDER BY P1.TEAM_ID;

/*(A, B) IN (C, D) : A = C AND B = D*/
SELECT * FROM PLAYER
WHERE (TEAM_ID, HEIGHT) IN (SELECT TEAM_ID, MAX(HEIGHT) HEIGHT FROM PLAYER GROUP BY TEAM_ID)
ORDER BY TEAM_ID;

/*EMP 테이블에서 사원의 이름과 매니저 이름을 검색*/
SELECT E1.ENAME EMPLOYEE, E2.ENAME MANAGER 
FROM EMP E1 JOIN EMP E2
ON E1.MGR = E2.EMPNO;

/*SQL 실행 순서*/
/*FROM >ON> JOIN> WHERE> GROUP BY> HAVING> SELECT> ORDER BY*/
/*[브론즈]*/
/*PLAYER 테이블에서 키가 NULL인 선수들은 키를 170으로 변경하여 평균 구하기(NULL 포함)*/
SELECT *FROM PLAYER;

SELECT  AVG(NVL(HEIGHT,'170')) AS "평균키입니다" 
FROM PLAYER;

/*[실버]*/
/*PLAYER 테이블에서 팀 별 최대 몸무게*/
SELECT TEAM_ID ,WEIGHT "최대 몸무게"
FROM PLAYER p  
WHERE (TEAM_ID,WEIGHT) IN
(SELECT TEAM_ID, MAX(WEIGHT)
 FROM PLAYER
 GROUP BY TEAM_ID )
ORDER BY TEAM_ID;
					
/*[골드]*/
/*AVG 함수를 쓰지 않고 PLAYER 테이블에서 선수들의 평균 키 구하기(NULL 포함)*/
SELECT SUM(HEIGHT)/COUNT(*) "AVG"
FROM PLAYER p;			

SELECT SUM(NVL(HEIGHT,0))/COUNT(NVL(HEIGHT,0)) "AVG"
FROM PLAYER p;

						
/*[플래티넘]*/
/*DEPT 테이블의 LOC별 평균 급여를 반올림한 값과 각 LOC별 SAL 총 합을 조회, 반올림 : ROUND(  ,2) 2는 뒷자리 소수점*/
SELECT *FROM DEPT;
SELECT *FROM EMP e ;

SELECT D.LOC ,ROUND(AVG(E.SAL),2), SUM(SAL)
FROM DEPT D JOIN EMP E
ON D.DEPTNO =E.DEPTNO
GROUP BY D.LOC;


/*[다이아]*/
/*PLAYER 테이블에서 팀별 최대 몸무게인 선수 검색*/
SELECT *FROM PLAYER p ;

SELECT TEAM_ID ,PLAYER_NAME, WEIGHT "MAX WEIGHT"
FROM PLAYER p 
WHERE (TEAM_ID,WEIGHT) IN 
(SELECT TEAM_ID, MAX(WEIGHT)
	FROM PLAYER p2 
	GROUP BY TEAM_ID);
/* P2.*  P2의 모든것    */

/*[마스터]*/
/*EMP 테이블에서 HIREDATE가 FORD의 입사년도와 같은 사원 전체 정보 조회*/
SELECT *
FROM EMP E
WHERE HIREDATE= (SELECT HIREDATE FROM EMP e2 WHERE ENAME ='FORD');

--형식 변환 TO_CHAR
SELECT *
FROM EMP E
WHERE TO_CHAR(HIREDATE,'YYYY')= 
TO_CHAR((SELECT HIREDATE FROM EMP e2 WHERE ENAME ='FORD'), 'YYYY');

/* 외부 조인 */
/*JOIN 할 때 선행 또는 후행 중 하나의 테이블 정보를 모두 확인하고 싶을 때 사용한다.*/
SELECT NVL(TEAM_NAME, '공용'), S.*
FROM TEAM T RIGHT OUTER JOIN STADIUM S
ON T.TEAM_ID = S.HOMETEAM_ID;


/*DEPARTMENT 테이블에서 매니저 이름 검색, 매니저가 없더라도 부서명 모두 검색*/
SELECT *FROM DEPARTMENTS d ;
SELECT *FROM EMPLOYEES e ;

SELECT D.DEPARTMENT_NAME, NVL(E.FIRST_NAME,'NO') ||' '||NVL(E.LAST_NAME,'NAME') "MANAGER_NAME"
FROM EMPLOYEES e RIGHT OUTER JOIN DEPARTMENTS d 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID AND E.EMPLOYEE_ID  =D.MANAGER_ID;

/*EMPLOYEES 테이블에서 사원의 매니저 이름, 사원의 이름 조회, 매니저가 없는 사원은 본인이 매니저임을 표시*/
SELECT *FROM EMPLOYEES e ;

SELECT E1.FIRST_NAME "사원 이름", NVL(E2.FIRST_NAME, E1.FIRST_NAME) "매니저 이름"
FROM EMPLOYEES E1 LEFT OUTER JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID;

SELECT EMPLOYEE_ID, FIRST_NAME "사원이름", NVL(E2.FIRST_NAME, )
FROM EMPLOYEES e JOIN EMPLOYEES e2 
ON E.EMPLOYEE_ID = E2.MANAGER_ID;

/*EMPLOYEES 테이블에서 사원들의 FIRST_NAME 모두 조회, 사원들 중 매니저는 JOB_ID 조회*/
SELECT E1.JOB_ID 관리부서, E2.JOB_ID 소속부서, E2.FIRST_NAME 이름
FROM
(
   SELECT JOB_ID, MANAGER_ID FROM EMPLOYEES
   GROUP BY JOB_ID, MANAGER_ID
) E1 
FULL OUTER JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID
ORDER BY 소속부서 DESC;

/*VIEW 뷰 
 * CREATE VIEW [이름] AS[쿼리문]
 * 
 * 기존의 테이블을 그대로 놔둔 채 필요한 컬럼들 및 새로운 컬럼을 만든 가상 테이블.
 * 실제 데이터가 저장되는 것은 아니지만 VIEW를 통해서 데이터를 관리할 수 있다.
 * 
 * -독립성 : 다른 곳에서 접근하지 못하도록 하는 성질
 * -편리성 : 길고 복잡한 쿼리문을 매번 작성할 필요가 없다
 * -보안성 : 기존의 쿼리문이 보이지 않는다.
 * 
 * 
 * */

/*PLAYER 테이블에 나이 컬럼 추가한 뷰 만들기*/
CREATE VIEW VIEW_PLAYER AS
SELECT FLOOR((SYSDATE-BIRTH_DATE) / 365) AGE, p.* FROM PLAYER P;
SELECT *FROM VIEW_PLAYER WHERE AGE<40;

/*EMPLOYEES 테이블에서 사원 이름과 그 사원의 매니저 이름이 있는 VIEW 만들기*/
CREATE VIEW VIEW_EMPLOYEES AS
SELECT E1.FIRST_NAME || ' ' || E1.LAST_NAME EMPLOYEE_NAME, E2.FIRST_NAME || ' ' || E2.LAST_NAME MANAGER_NAME
FROM EMPLOYEES E1 JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID;

SELECT * FROM VIEW_EMPLOYEES;

/*PLAYER 테이블에서 TEAM_NAME 컬럼을 추가한 VIEW 만들기*/
CREATE VIEW VIEW_PLAYER_TEAM AS
SELECT TEAM_NAME, PLAYER.* FROM TEAM JOIN PLAYER ON PLAYER.TEAM_ID = TEAM.TEAM_ID;









